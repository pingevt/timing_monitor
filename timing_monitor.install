<?php

/**
 * @file
 * Install, update and uninstall functions for the timing_monitor module.
 */

/**
 * Implements hook_schema().
 */
function timing_monitor_schema() {
  $schema['timing_monitor_log'] = [
    'description' => 'Table that contains logs of api events.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique event ID.',
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who triggered the event.',
      ],
      'session_uuid' => [
        'type' => 'varchar_ascii',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'UUID for a unique session',
      ],
      // 'keep' => [
      //   'type' => 'int',
      //   'unsigned' => TRUE,
      //   'not null' => TRUE,
      //   'default' => 0,
      //   'description' => 'Whether or not to always keep this record.',
      // ],
      'type' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Type of log message, for example "user" or "page not found."',
      ],
      'marker' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'Type of marker. Can be start, mark, finish',
      ],
      'message' => [
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Text of log message to be passed into the t() function.',
      ],
      'variables' => [
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'Serialized array of variables that match the message string and that is passed into the t() function.',
      ],
      'severity' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The severity level of the event; ranges from 0 (Emergency) to 7 (Debug)',
      ],
      'path' => [
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Api path.',
      ],
      'method' => [
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Method used for the call.',
      ],
      // 'query_string' => [
      //   'type' => 'text',
      //   'not null' => FALSE,
      //   'description' => 'The called query string.',
      // ],
      // 'request_params' => [
      //   'type' => 'text',
      //   'not null' => TRUE,
      //   'description' => 'The called request params.',
      // ],
      // 'link' => [
      //   'type' => 'text',
      //   'not null' => TRUE,
      //   'description' => 'Link to view the result of the event.',
      // ],
      // 'location'  => [
      //   'type' => 'text',
      //   'not null' => TRUE,
      //   'description' => 'URL of the origin of the event.',
      // ],
      // 'referer' => [
      //   'type' => 'text',
      //   'not null' => FALSE,
      //   'description' => 'URL of referring page.',
      // ],
      // 'hostname' => [
      //   'type' => 'varchar_ascii',
      //   'length' => 128,
      //   'not null' => TRUE,
      //   'default' => '',
      //   'description' => 'Hostname of the user who triggered the event.',
      // ],
      'timer' => [
        'type' => 'float',
        'unsigned' => TRUE,
        'size' => 'big',
        'not null' => TRUE,
        'description' => 'Timer for this entry',
      ],
      'duration' => [
        'type' => 'float',
        'unsigned' => TRUE,
        'size' => 'big',
        'not null' => FALSE,
        'description' => 'Duration if we have a start',
      ],
      'timestamp' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp of when event occurred.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'type' => ['type'],
      'uid' => ['uid'],
      'severity' => ['severity'],
    ],
  ];

  return $schema;
}

/**
 * Add fields to schema.
 */
function timing_monitor_update_9001() {
  $schema = Drupal\Core\Database\Database::getConnection()->schema();

  $schema->addField('timing_monitor_log', 'marker', [
    'type' => 'varchar_ascii',
    'length' => 64,
    'not null' => FALSE,
    'default' => NULL,
    'description' => 'Type of marker. Can be start, mark, finish',
  ]);

  $schema->addField('timing_monitor_log', 'duration', [
    'type' => 'float',
    'unsigned' => TRUE,
    'size' => 'big',
    'not null' => FALSE,
    'description' => 'Duration if we have a start',
  ]);
}
