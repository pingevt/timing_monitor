<?php

/**
 * @file
 * Api logging module.
 */

use Bluecadet\DrupalPackageManager\Checker;
use Drupal\Core\File\FileSystemInterface;
use Drupal\update\UpdateManagerInterface;

/**
 * Callback for available field values.
 *
 * This is used for views fitler.
 */
function timing_monitor_get_type():array {
  $connection = \Drupal::database();

  $query = $connection->select('timing_monitor_log', 'l');
  $query->fields('l', ['type']);
  // $query->orderBy('id', 'DESC');
  $query->range(0, 10000);
  $query->groupBy('type');

  $r = $query->execute()->fetchAll();

  $return = [];
  foreach ($r as $r2) {
    $return[$r2->type] = $r2->type;
  }

  return $return;
}

/**
 * Callback for available field values.
 *
 * This is used for views fitler.
 */
function timing_monitor_get_marker():array {
  return [
    'start' => "Start",
    'mark' => "Mark",
    'finish' => "Finish",
  ];
}

/**
 * Implements hook_cron().
 *
 * Controls the size of the api log table, paring it to 'row_limit' messages.
 */
function timing_monitor_cron() {
  // Cleanup the timing_monitor_log table.
  $row_limit = \Drupal::config('timing_monitor.settings')->get('row_limit');

  // For row limit n, get the id of the nth row in descending id order.
  // Counting the most recent n rows avoids issues with id number sequences,
  // e.g. auto_increment value > 1 or rows deleted directly from the table.
  if ($row_limit > 0) {
    $start = microtime(TRUE);

    // Loop through 25 reports if we can.
    for ($i = 0; $i < 25; $i++) {

      timing_monitor_archive_single_session($row_limit);
      $c = $i;

      // Check timing as well. Do not exceed 30 seconds.
      if (microtime(TRUE) - $start >= 30) {
        $i = 999;
      }
    }
    \Drupal::logger('timing_monitor')->notice('Stopping after %count iterations', ['%count' => ($c + 1)]);
  }
}

/**
 * Archive a single session.
 *
 * @param integer $row_limit
 *
 * @return string | NULL
 */
function timing_monitor_archive_single_session(int $row_limit = 1000): string | NULL {

  $connection = \Drupal::database();

  // Grab the last UUID - and archive those records.
  $last_UUID = $connection->select('timing_monitor_log', 'l')
    ->fields('l', ['session_uuid'])
    ->orderBy('id', 'DESC')
    ->range(($row_limit - 1), 1)
    ->execute()->fetchField();

  // If no results, return.
  if (!$last_UUID) {
    return NULL;
  }

  if (timing_monitor_archive_by_uuid($last_UUID)) {
    // Delete All the entries with that UUID.
    $delete_count = $connection->delete('timing_monitor_log')
      ->condition('session_uuid', $last_UUID)
      ->execute();
  }
  else {
    // @todo Throw error or log.
  }

  return $last_UUID;
}

/**
 * Archive to file timing records by their UUID.
 */
function timing_monitor_archive_by_uuid(string $uuid):bool {
  $utility = \Drupal::service('timing_monitor.utility');
  $connection = \Drupal::database();
  $rows = $connection->select('timing_monitor_log', 'l')
    ->fields('l', [])
    ->condition('session_uuid', $uuid)
    ->orderBy('id', 'ASC')
    ->execute()->fetchAll();

  if (!empty($rows)) {
    $filesystem = \Drupal::service('file_system');
    $dir = "public://" . \Drupal::config('timing_monitor.settings')->get('directory');

    // Build out end of dir by date.
    $date = new \DateTime();
    $date->setTimestamp(current($rows)->timestamp);
    $dir .= "/" . $date->format("Y/m/d");

    if (!$filesystem->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY)) {
      // @todo Log or throw error.
      return FALSE;
    }

    $rows_arrays = array_map(function ($item) {
      return (array) $item;
    }, $rows);

    $data_str = $utility->csvEscape(array_keys($rows_arrays[0])) . "\n";
    foreach ($rows_arrays as $i => $r) {
      $data_str .= $utility->csvEscape($r);

      if ($i != (count($rows_arrays) - 1)) {
        $data_str .= "\n";
      }
    }

    $destination = $dir . "/" . $rows_arrays[0]['id'] . ".csv";

    $r = $filesystem->saveData($data_str, $destination, FileSystemInterface::EXISTS_RENAME);

    // Check for gzip.
    // phpcs:disable
    // @todo: WIP.
    // if (\Drupal::config('timing_monitor.settings')->get('gzip')) {
      // ksm("gzip!");

      // $realpath = $filesystem->realpath($r);
      // ksm($realpath);

      // gzcompressfile($realpath, 1);
      // copy($realpath, 'compress.zlib://' . $realpath . ".gz");
    // }
    // phpcs:enable
  }

  return TRUE;
}

/**
 * Implements hook_update_status_alter().
 */
function timing_monitor_update_status_alter(&$projects) {
  $modules['pingevt'] = [
    'timing_monitor',
  ];

  $filtered_projects = [];

  foreach ($modules as $user => $user_data) {
    $filtered_projects += array_filter($projects, function($v) use ($user_data) {
        return in_array($v, $user_data);
    }, ARRAY_FILTER_USE_KEY);
  }

  $checker = new Checker($modules, $filtered_projects);

  foreach ($modules as $user => $user_data) {
    foreach ($user_data as $module_name) {
      if (in_array($module_name, array_keys($projects))) {
        $projects[$module_name] = $checker->updateDrupalModulePackage($projects[$module_name], $user, $module_name);
      }
    }
  }
}

/**
 * Batch method for archiving logs.
 */
function timing_monitor__archiving($count, $row_limit, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $count;
  }

  $uuid = timing_monitor_archive_single_session($row_limit);
  $context['results'][] = $uuid;
  $context['message'] = "Archiving " . $context['sandbox']['progress'] . " of " . $context['sandbox']['max'] . " sessions.";

  $context['sandbox']['progress']++;

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Batch process finish function.
 */
function timing_monitor__archiving_finished($success, $results, $operations, $elapsed): void {
  if ($success) {
    $message = \Drupal::translation()->formatPlural(count($results), 'One session processed.', '@count sessions processed.');
  }
  else {
    $message = t('Finished with an error.');
  }
  \Drupal::messenger()->addMessage($message);

  // phpcs:disable
  // foreach ($results as $result) {
  //   $items[] = t('Archived %title.', array(
  //     '%title' => $result,
  //   ));
  // }
  // $message_render = [
  //   '#theme' => 'item_list',
  //   '#items' => $items,
  // ];

  // \Drupal::messenger()->addMessage(render($message_render));

  // phpcs:enable

  if (!$success) {
    \Drupal::messenger()->addError(t('Finished with an error.'));
  }
}
