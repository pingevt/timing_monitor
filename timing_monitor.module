<?php

/**
 * @file
 * Api logging module.
 */

use Drupal\Core\File\FileSystemInterface;
use Drupal\update\UpdateManagerInterface;
use Melbahja\Semver\Semver;

/**
 * Callback for available field values.
 *
 * This is used for views fitler.
 */
function timing_monitor_get_type():array {
  $connection = \Drupal::database();

  $query = $connection->select('timing_monitor_log', 'l');
  $query->fields('l', ['type']);
  $query->orderBy('id', 'DESC');
  $query->range(0, 10000);
  $query->groupBy('type');

  $r = $query->execute()->fetchAll();

  $return = [];
  foreach ($r as $r2) {
    $return[$r2->type] = $r2->type;
  }

  return $return;
}

/**
 * Callback for available field values.
 *
 * This is used for views fitler.
 */
function timing_monitor_get_marker():array {
  return [
    'start' => "Start",
    'mark' => "Mark",
    'finish' => "Finish",
  ];
}

/**
 * Implements hook_cron().
 *
 * Controls the size of the api log table, paring it to 'row_limit' messages.
 */
function timing_monitor_cron() {
  // Cleanup the timing_monitor_log table.
  $row_limit = \Drupal::config('timing_monitor.settings')->get('row_limit');

  // For row limit n, get the id of the nth row in descending id order.
  // Counting the most recent n rows avoids issues with id number sequences,
  // e.g. auto_increment value > 1 or rows deleted directly from the table.
  if ($row_limit > 0) {
    $connection = \Drupal::database();

    // Loop through 25 reports if we can.
    for ($i = 0; $i < 25; $i++) {

      // Grab the last UUID - and archive those records.
      $last_UUID = $connection->select('timing_monitor_log', 'l')
        ->fields('l', ['session_uuid'])
        ->orderBy('id', 'DESC')
        ->range(($row_limit - 1), 1)
        ->execute()->fetchField();

      // If no results, return.
      if (!$last_UUID) {
        return;
      }

      if (timing_monitor_archive_by_uuid($last_UUID)) {
        // Delete All the entries with that UUID.
        $connection->delete('timing_monitor_log')
          ->condition('session_uuid', $last_UUID)
          ->execute();
      }
      else {
        // @todo Throw error or log.
      }
    }
  }
}

/**
 * Archive to file timing records by their UUID.
 */
function timing_monitor_archive_by_uuid(string $uuid):bool {
  $utility = \Drupal::service('timing_monitor.utility');
  $connection = \Drupal::database();
  $rows = $connection->select('timing_monitor_log', 'l')
    ->fields('l', [])
    ->condition('session_uuid', $uuid)
    ->orderBy('id', 'ASC')
    ->execute()->fetchAll();

  if (!empty($rows)) {
    $filesystem = \Drupal::service('file_system');
    $dir = "public://" . \Drupal::config('timing_monitor.settings')->get('directory');

    // Build out end of dir by date.
    $date = new \DateTime();
    $date->setTimestamp(current($rows)->timestamp);
    $dir .= "/" . $date->format("Y/m/d");

    if (!$filesystem->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY)) {
      // @todo Log or throw error.
      return FALSE;
    }

    $rows_arrays = array_map(function ($item) {
      return (array) $item;
    }, $rows);

    $data_str = $utility->csvEscape(array_keys($rows_arrays[0])) . "\n";
    foreach ($rows_arrays as $i => $r) {
      $data_str .= $utility->csvEscape($r);

      if ($i != (count($rows_arrays) - 1)) {
        $data_str .= "\n";
      }
    }

    $destination = $dir . "/" . $rows_arrays[0]['id'] . ".csv";

    $r = $filesystem->saveData($data_str, $destination, FileSystemInterface::EXISTS_RENAME);

    // Check for gzip.
    // phpcs:disable
    // @todo: WIP.
    // if (\Drupal::config('timing_monitor.settings')->get('gzip')) {
      // ksm("gzip!");

      // $realpath = $filesystem->realpath($r);
      // ksm($realpath);

      // gzcompressfile($realpath, 1);
      // copy($realpath, 'compress.zlib://' . $realpath . ".gz");
    // }
    // phpcs:enable
  }

  return TRUE;
}

/**
 * Implements hook_update_status_alter().
 */
function timing_monitor_update_status_alter(&$projects) {
  $moduleHandler = \Drupal::service('module_handler');
  $modules = [
    'timing_monitor',
  ];

  foreach ($modules as $module_name) {
    try {
      if ($moduleHandler->moduleExists($module_name)) {

        // Init vars.
        $also = [];
        $releases = [];
        $package_name = 'pingevt/' . $module_name;
        $packagist_base = "https://packagist.org/packages/pingevt/" . $module_name;
        $url = "https://repo.packagist.org/p2/pingevt/$module_name.json";

        // Initiate curl and get info from Packagist.
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
        curl_setopt($ch, CURLOPT_URL, $url);
        $result = curl_exec($ch);
        curl_close($ch);

        $data = json_decode($result, TRUE);

        try {

          $exisiting_version = Semver::parse($projects[$module_name]['existing_version']);
          $packages = $data['packages'][$package_name];
          // Sort pakcages from packagist lowest to highest.
          uasort($packages, 'timing_monitor__order_packages');

          $projects[$module_name]['status'] = UpdateManagerInterface::CURRENT;

          foreach ($packages as $package_data) {
            try {
              $release_version = Semver::parse($package_data['version']);
              if ($exisiting_version->compare($release_version, "<")) {

                // Create release data.
                $release_data = [
                  'name' => $projects[$module_name]['name'],
                  'version' => $package_data['version'],
                  'tag' => $package_data['version'],
                  'status' => "published",
                  'release_link' => $packagist_base . "#" . $package_data['version'],
                  'download_link' => $packagist_base . "#" . $package_data['version'],
                  'date' => strtotime($package_data['time']),
                  'files' => "",
                  'terms' => [],
                  'security' => "",
                ];

                $releases[$package_data['version']] = $release_data;

                // Is is also?
                if ($exisiting_version->getMajor() < $release_version->getMajor()) {
                  $projects[$module_name]['status'] = UpdateManagerInterface::NOT_CURRENT;
                  $also[$release_version->getMajor() . "." . $release_version->getMinor()] = $package_data['version'];
                }
                elseif ($exisiting_version->getMajor() == $release_version->getMajor() && $exisiting_version->getMinor() < $release_version->getMinor()) {
                  $also[$release_version->getMajor() . "." . $release_version->getMinor()] = $package_data['version'];
                }

                // Is it latest?
                // Is it recommended?
                if ($exisiting_version->getMajor() == $release_version->getMajor()) {
                  $projects[$module_name]['latest_version'] = $package_data['version'];
                  $projects[$module_name]['recommended'] = $package_data['version'];

                  if ($exisiting_version != $release_version) {
                    $projects[$module_name]['status'] = UpdateManagerInterface::NOT_CURRENT;
                  }
                }
              }
            }
            catch (Exception $e) {
              // phpcs:ignore
              // \Drupal::messenger()->addWarning(t('Caught exception while checking release: %error', ['%error' => $e->getMessage()]));
              \Drupal::logger('timing_monitor')->warning('Caught exception while checking release: ' . $e->getMessage());
            }
          }

          // Update attributes.
          $projects[$module_name]['link'] = $packagist_base;
          $projects[$module_name]['title'] = $projects[$module_name]['info']['name'];

          if (!empty($releases)) {
            $projects[$module_name]['releases'] = $releases;
          }
          if (!empty($also)) {
            $projects[$module_name]['also'] = $also;
          }
        }
        catch (\Exception $e) {
          // phpcs:ignore
          // \Drupal::messenger()->addError(t('Caught exception while setting release data: %error', ['%error' => $e->getMessage()]));
          \Drupal::logger('timing_monitor')->error('Caught exception while setting release data: ' . $e->getMessage());
        }
      }
    }
    catch (\Exception $e) {
      // phpcs:ignore
      // \Drupal::messenger()->addError(t('Caught exception while checking release data: %error', ['%error' => $e->getMessage()]));
      \Drupal::logger('timing_monitor')->error('Caught exception while checking release data: ' . $e->getMessage());
    }
  }
}

/**
 * Sort Packages array from Packagist.
 */
function timing_monitor__order_packages($a, $b) {
  if (Semver::compare($a['version'], $b['version'])) {
    return 0;
  }
  return Semver::compare($a['version'], $b['version'], '>') ? 1 : -1;
}
